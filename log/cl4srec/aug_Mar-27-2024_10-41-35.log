2024-03-27 10:41:35,263 - {'optimizer': {'name': 'adam', 'lr': 0.001, 'final_lr': 1e-06, 'weight_decay': 0}, 'train': {'model_test_run': True, 'weighted_loss_fn': True, 'epoch': 1000, 'batch_size': 64, 'save_model': True, 'log_loss': True, 'test_step': 1, 'reproducible': True, 'seed': 2023, 'tensorboard': True, 'conf_mat': True, 'ssl': False, 'gradient_accumulation': False, 'accumulation_steps': 4, 'early_stop': False, 'parameter_class_weights_path': './datasets/sequential/aug/parameters/param.pkl', 'parameter_label_mapping_path': './datasets/sequential/aug/parameters/label_mapping.pkl'}, 'test': {'metrics': ['precision', 'recall', 'f1score', 'accuracy'], 'k': [1, 2, 3], 'batch_size': 64, 'train_eval': False, 'save_path': '2024-03-27_10-41'}, 'data': {'type': 'sequential', 'name': 'aug', 'seq_aug': False, 'dynamic_context_window_length': 100, 'user_num': 100, 'item_num': 28, 'max_context_length': 100, 'dynamic_context_feat_num': 14, 'static_context_feat_num': 6, 'static_context_max': [12, 6, 23, 1, 1, 1]}, 'model': {'name': 'cl4srec', 'context_encoder': 'tempcnn', 'interaction_encoder': 'sasrec', 'dropout_rate': 0.1, 'n_layers': 2, 'embedding_size': 16, 'n_heads': 2, 'max_seq_len': 10, 'lmd': 0.1, 'tau': 1, 'encoder_combine': 'concat'}, 'lstm': {'hidden_size': 64, 'num_layers': 2}, 'tune': {'enable': False, 'hyperparameters': ['dropout_rate', 'lmd', 'tau'], 'dropout_rate': [0.1, 0.2, 0.3], 'lmd': [0.05, 0.1, 0.2], 'tau': [0.5, 0.7, 0.9]}, 'device': 'cpu'}
2024-03-27 10:41:36,280 - [Epoch   0 / 1000] rec_loss: 3.3624 cl_loss: 0.0000 
2024-03-27 10:41:36,569 - If `preds` have one dimension more than `target`, `preds.shape[1]` should be equal to number of classes.
Traceback (most recent call last):
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/utils.py", line 15, in wrapper
    return func(*args, **kwargs)
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/trainer.py", line 234, in evaluate
    eval_result = self.metric.eval(model, self.data_handler.test_dataloader)
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/metrics.py", line 163, in eval
    metrics_data = self.eval_new(model, test_dataloader, test)
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/metrics.py", line 141, in eval_new
    metrics_data = self.metrics_calc_torch(true_labels, pred_scores)
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/metrics.py", line 100, in metrics_calc_torch
    precision = torchmetrics.Precision(num_classes = self._num_classes,
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torchmetrics/metric.py", line 304, in forward
    self._forward_cache = self._forward_reduce_state_update(*args, **kwargs)
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torchmetrics/metric.py", line 373, in _forward_reduce_state_update
    self.update(*args, **kwargs)
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torchmetrics/metric.py", line 466, in wrapped_func
    update(*args, **kwargs)
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torchmetrics/classification/stat_scores.py", line 333, in update
    _multiclass_stat_scores_tensor_validation(
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torchmetrics/functional/classification/stat_scores.py", line 275, in _multiclass_stat_scores_tensor_validation
    raise ValueError(
ValueError: If `preds` have one dimension more than `target`, `preds.shape[1]` should be equal to number of classes.
2024-03-27 10:41:36,571 - If `preds` have one dimension more than `target`, `preds.shape[1]` should be equal to number of classes.
Traceback (most recent call last):
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/utils.py", line 15, in wrapper
    return func(*args, **kwargs)
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/trainer.py", line 168, in train
    self.evaluate(model, epoch_idx)
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/utils.py", line 18, in wrapper
    raise e
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/utils.py", line 15, in wrapper
    return func(*args, **kwargs)
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/trainer.py", line 234, in evaluate
    eval_result = self.metric.eval(model, self.data_handler.test_dataloader)
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/metrics.py", line 163, in eval
    metrics_data = self.eval_new(model, test_dataloader, test)
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/metrics.py", line 141, in eval_new
    metrics_data = self.metrics_calc_torch(true_labels, pred_scores)
  File "/Volumes/Workspace/In-Car CARSI/carsii/trainer/metrics.py", line 100, in metrics_calc_torch
    precision = torchmetrics.Precision(num_classes = self._num_classes,
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torchmetrics/metric.py", line 304, in forward
    self._forward_cache = self._forward_reduce_state_update(*args, **kwargs)
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torchmetrics/metric.py", line 373, in _forward_reduce_state_update
    self.update(*args, **kwargs)
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torchmetrics/metric.py", line 466, in wrapped_func
    update(*args, **kwargs)
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torchmetrics/classification/stat_scores.py", line 333, in update
    _multiclass_stat_scores_tensor_validation(
  File "/Users/sreeragvn/miniconda3/envs/carsii/lib/python3.8/site-packages/torchmetrics/functional/classification/stat_scores.py", line 275, in _multiclass_stat_scores_tensor_validation
    raise ValueError(
ValueError: If `preds` have one dimension more than `target`, `preds.shape[1]` should be equal to number of classes.
